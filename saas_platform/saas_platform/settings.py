"""
Django settings for saas_platform project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-^xnbgnj*4x!b_zv#kvc!d49_dvwemnw=!9ay@850y9harw^rte'
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-^xnbgnj*4x!b_zv#kvc!d49_dvwemnw=!9ay@850y9harw^rte')


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = os.getenv('DEBUG', 'True') == 'True'


# ALLOWED_HOSTS = [
#     '192.168.1.31',  # Your local IP
#     'acme.local',    # Existing tenant domain
#     'localhost',     # For local testing
#     '*.local',       # Wildcard for tenant subdomains
# ]
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '192.168.1.31,acme.local,localhost,*.local').split(',')


# Application definition
# SHARED_APPS = [
#     'django_tenants',  # Required for multi-tenancy
#     'django.contrib.admin',  # Optional: Admin for shared schema
#     'django.contrib.auth',  # Authentication for shared schema
#     'django.contrib.contenttypes',  # Content types for shared schema
#     'django.contrib.sessions',  # Sessions (shared)
#     'django.contrib.messages',  # Messages (shared)
#     'django.contrib.staticfiles',
#     # 'core.apps.CoreConfig',
#     'sslserver',
#     'core.apps.CoreConfig',  # Contains Tenant and Domain models (shared)
#     'widget_tweaks',
# ]

# TENANT_APPS = [
#     'django.contrib.auth',  # Authentication for tenant users
#     'django.contrib.contenttypes',  # Content types per tenant
#     #'core',  # CustomUser and tenant-specific models
#     'django.contrib.staticfiles',  # Static files per tenant (if needed)
# ]

# INSTALLED_APPS = list(set(SHARED_APPS + TENANT_APPS))

# Application definition
SHARED_APPS = [
    'django_tenants',  # Required for multi-tenancy
    'core.apps.CoreConfig',  # Contains Tenant, Domain, CustomUser (shared)
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'sslserver',
    'widget_tweaks',
]

TENANT_APPS = [
    #'core.apps.CoreConfig',  # Tenant-specific models like Task, TaskAttachment
    'django.contrib.auth',   # Tenant-specific users
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

INSTALLED_APPS = [
    'django_tenants',
    'core.apps.CoreConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'sslserver',
    'widget_tweaks',
]
# PUBLIC_SCHEMA_NAME = 'public'
# Tenant Configuration
TENANT_MODEL = 'core.Tenant'
TENANT_DOMAIN_MODEL = 'core.Domain'
PUBLIC_SCHEMA_NAME = 'public'

MIDDLEWARE = [
    'django_tenants.middleware.main.TenantMainMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'saas_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.tenant_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'saas_platform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
AUTH_USER_MODEL = 'core.CustomUser'
# DATABASES = {
#     'default': {
#         'ENGINE': 'django_tenants.postgresql_backend',
#         'NAME': 'saas_db',
#         'USER': 'postgres',
#         'PASSWORD': 'root',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }
# Database
DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django_tenants.postgresql_backend'),
        'NAME': os.getenv('DB_NAME', 'saas_db'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'root'),
        'HOST': os.getenv('DB_HOST', 'localhost'),  # Will be 'db' in Docker Compose
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}
DATABASE_ROUTERS = ['django_tenants.routers.TenantSyncRouter']
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'core/static'),
] 
# STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_REDIRECT_URL = 'tenant_home'  # After login, go to home
LOGOUT_REDIRECT_URL = 'login'
LOGIN_URL = '/login/'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Security settings for production
SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', 'False') == 'True'
CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE', 'False') == 'True'
SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'False') == 'True'
